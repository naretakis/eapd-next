name: Deploy to GitHub Pages

on:
  push:
    branches:
      - main # Production deployment
      - test # Staging deployment
      - dev # Development deployment
  workflow_dispatch: # Allow manual deployment

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: 'pages-${{ github.ref_name }}'
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Install dependencies
        run: npm ci

      - name: Set environment variables
        run: |
          if [ "${{ github.ref_name }}" = "main" ]; then
            echo "NEXT_PUBLIC_ENVIRONMENT=production" >> $GITHUB_ENV
            echo "NEXT_PUBLIC_BASE_PATH=/eapd-next" >> $GITHUB_ENV
          elif [ "${{ github.ref_name }}" = "test" ]; then
            echo "NEXT_PUBLIC_ENVIRONMENT=staging" >> $GITHUB_ENV
            echo "NEXT_PUBLIC_BASE_PATH=/eapd-next-test" >> $GITHUB_ENV
          elif [ "${{ github.ref_name }}" = "dev" ]; then
            echo "NEXT_PUBLIC_ENVIRONMENT=development" >> $GITHUB_ENV
            echo "NEXT_PUBLIC_BASE_PATH=/eapd-next-dev" >> $GITHUB_ENV
          fi

      - name: Build with Next.js
        run: npm run build

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./out

  deploy:
    environment:
      name: github-pages-${{ github.ref_name }}
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  deployment-verification:
    runs-on: ubuntu-latest
    needs: deploy
    if: always()

    steps:
      - name: Verify deployment
        run: |
          if [ "${{ github.ref_name }}" = "main" ]; then
            URL="https://${{ github.repository_owner }}.github.io/eapd-next/"
          elif [ "${{ github.ref_name }}" = "test" ]; then
            URL="https://${{ github.repository_owner }}.github.io/eapd-next-test/"
          elif [ "${{ github.ref_name }}" = "dev" ]; then
            URL="https://${{ github.repository_owner }}.github.io/eapd-next-dev/"
          fi

          echo "Verifying deployment at: $URL"

          # Wait for deployment to be available
          sleep 30

          # Check if the site is accessible
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$URL" || echo "000")

          if [ "$HTTP_STATUS" = "200" ]; then
            echo "‚úÖ Deployment verification successful"
            echo "Site is accessible at: $URL"
          else
            echo "‚ùå Deployment verification failed"
            echo "HTTP Status: $HTTP_STATUS"
            exit 1
          fi

      - name: Create deployment status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const status = '${{ job.status }}' === 'success' ? 'success' : 'failure';
            const environment = '${{ github.ref_name }}' === 'main' ? 'production' : 
                               '${{ github.ref_name }}' === 'test' ? 'staging' : 'development';

            github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: context.payload.deployment?.id || 0,
              state: status,
              environment: environment,
              description: status === 'success' ? 
                'Deployment verification passed' : 
                'Deployment verification failed'
            });

  rollback:
    runs-on: ubuntu-latest
    needs: [deploy, deployment-verification]
    if: failure() && github.ref_name == 'main'

    steps:
      - name: Rollback deployment
        uses: actions/github-script@v7
        with:
          script: |
            console.log('üîÑ Initiating rollback procedure...');

            // Get the previous successful deployment
            const deployments = await github.rest.repos.listDeployments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              environment: 'production',
              per_page: 10
            });

            const successfulDeployments = deployments.data.filter(d => 
              d.sha !== context.sha && d.environment === 'production'
            );

            if (successfulDeployments.length > 0) {
              const previousDeployment = successfulDeployments[0];
              console.log(`Found previous deployment: ${previousDeployment.sha}`);
              
              // Create rollback deployment status
              await github.rest.repos.createDeploymentStatus({
                owner: context.repo.owner,
                repo: context.repo.repo,
                deployment_id: previousDeployment.id,
                state: 'success',
                description: 'Rolled back due to deployment failure'
              });
              
              console.log('‚úÖ Rollback completed');
            } else {
              console.log('‚ö†Ô∏è No previous deployment found for rollback');
            }
